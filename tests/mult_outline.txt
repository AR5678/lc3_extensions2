Multiply:
R1 = 0 
R2 = 3
R3 = 2



Values:


r1, r2, r3. 
add 0 to r3. 
BrN to a spot. 


-------------------------------------------------------------
MLT R1, R1, R1. 
MLT R3, R3, R2. 

Registers:
MLT R1, R2, R3

    ADD R3, R3, #0. 
    Brp to positive stuff. 
    Brn to negative stuff. 
    positive stuff. (branch to end of code)
    negative stuff. 
    all finish here. 


positives:
    all different: 
        set R1 = 0. 
        R1 = R1 + R2
        R3 = R3 - 1
        Brp -- to two lines above (probably decrease 3)

    r3 is negative:

        if r2 pos:
            # switch which is the counter. 

        if r2 neg: 
            # answer is positive. 


R2 = -2, R3 = -5 
R1 + r2, r3 + 1 Brn. 

R2 = 2, R3 = -5:
    same thing. 


    r3 is positive and r2 is either:
        RST R1. 
        ST R2 -- in one locations 
        ST R3 -- in one locations
        BRnzp two spots
        'here is R2'
        'here is R3' 

-->     R1 = R1 + R2 
        R3 = R3 - 1
        Brp -->  0000 001 111111101. 0x3FD


        LDR in R3 from line 27. 
        LDR in R2 from line 26. 


MLT R1, R1, R2. 
----------------------------------
if r1 == r2:
    ST r2 in memory. 
    ST r3 in memory. 

    set r1 = 0

    Loop:
        LD r1 = mem[0x1], 
        r1 = r1 + 0 

        LD into thirdRegister the third value
        r3 = r3 - 1
        store r3 in memory 
        brp -> 


MLT R1, R1, R2:

    R1 = 3
    R2 = 2.
    ------ note: at the beginning, two memory locations for r3. 

    0x1 = 3             ## incrementing value
    0x2 = 2             ### orignal R2, we will need to restore
    0x3 = 2 then = 1    ## counter

    R1 = 0
    loop:
        LD R2 = mem[0x1] --> R2 = 3
        r1 = r1 + 0 ................... R1 = 3, R2 = 3.
        LD R2 = mem[0x3] = 2
        r2 = r2 - 1 .................... R1 = 3, R2 = 1
        ST r2 in 0x3
        BRp 
    
    2nd loop:
        R2 = 3
        r1 = r1 + r2 ....... R1 = 6, R2 = 3
        R2 = 1 
        R2 = 0
        Brp -- branch out

    restore r3. 
        R2 = mem[0x2]
    Done. 


MLT R1, R1, R1. 

R1 = 3, R1 = 9
R1 = 0, R1 = 6, 

    save r1 in two memory locations 0x1, 0x2
    mem[0x1] = 3 4 5 6 7 8 9      ## solution.               3,6,12,24,. .... 3,6,9,12,15. 

    mem[0x2] = 3 2 1 0 . 3 2 1 0. 3 2 1 0.    ## counter.                 3, 4, 5, 6, 7, 8, 9, 10

    mem[0x3] = 6    ## ???


    LD 0x1 in r1
    add r1 = r1 + 0
    st in 0x1

    take care of counter --
    subtract 2. 

    br negative. 

---------------------------------------------------------
mem[0x4] = 6
R1 = 3 

R1 = 9 Impossible!










